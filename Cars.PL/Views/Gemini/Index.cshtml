@* Views/Gemini/Index.cshtml *@
@{
    ViewBag.Title = "Gemini Chatbot";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/css/Gemini.css" />
<br />
<br />
<br />
<br />
<br />
    <div class="chat-container">
        <div class="chat-header">
            <br />

            <h1> Gemini AI Chatbot</h1>
        </div>
        <div class="chat-messages" id="chatMessages">
            <div class="message bot">
                <div class="message-content">
                    Hello! I'm powered by Google's Gemini AI. How can I help you today?
                </div>
            </div>
        </div>
        <div class="chat-input-container">
            <input type="text" id="messageInput" placeholder="Type your message here..." />
            <button id="sendBtn">Send</button>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            const chatMessages = $('#chatMessages');
            const messageInput = $('#messageInput');
            const sendBtn = $('#sendBtn');
            let currentStreamingMessage = null;

            function scrollToBottom() {
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
            }

            function addMessage(message, isUser) {
                const messageClass = isUser ? 'user' : 'bot';
                const messageHtml = `
                    <div class="message ${messageClass}">
                        <div class="message-content">${escapeHtml(message)}</div>
                    </div>
                `;
                chatMessages.append(messageHtml);
                scrollToBottom();
            }

            function createStreamingMessage() {
                const messageHtml = `
                    <div class="message bot streaming-message">
                        <div class="message-content">
                            <span class="streaming-text"></span><span class="streaming-cursor"></span>
                        </div>
                    </div>
                `;
                chatMessages.append(messageHtml);
                currentStreamingMessage = $('.streaming-message .streaming-text');
                scrollToBottom();
            }

            function appendToStreamingMessage(text) {
                if (currentStreamingMessage) {
                    const currentText = currentStreamingMessage.text();
                    currentStreamingMessage.text(currentText + text);
                    scrollToBottom();
                }
            }

            function finalizeStreamingMessage() {
                if (currentStreamingMessage) {
                    $('.streaming-cursor').remove();
                    $('.streaming-message').removeClass('streaming-message');
                    currentStreamingMessage = null;
                }
            }

            function showTypingIndicator() {
                const typingHtml = `
                    <div class="message bot typing-message">
                        <div class="typing-indicator" style="display: block;">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                `;
                chatMessages.append(typingHtml);
                scrollToBottom();
            }

            function hideTypingIndicator() {
                $('.typing-message').remove();
            }

            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML.replace(/\n/g, '<br>');
            }

            function simulateStreaming(text) {
                createStreamingMessage();
                let index = 0;
                const words = text.split(' ');
                
                function streamNextWord() {
                    if (index < words.length) {
                        const word = words[index] + (index < words.length - 1 ? ' ' : '');
                        appendToStreamingMessage(word);
                        index++;
                        setTimeout(streamNextWord, 50); // Speed of streaming
                    } else {
                        finalizeStreamingMessage();
                    }
                }
                
                streamNextWord();
            }

            function sendMessage() {
                const message = messageInput.val().trim();
                if (!message) return;

                addMessage(message, true);
                messageInput.val('');
                sendBtn.prop('disabled', true);
                showTypingIndicator();

                $.ajax({
                    url: '@Url.Action("SendMessage", "Gemini")',
                    type: 'POST',
                    data: { message: message },
                    success: function (data) {
                        hideTypingIndicator();
                        if (data.success) {
                            simulateStreaming(data.response);
                        } else {
                            addMessage('Error: ' + data.response, false);
                        }
                        sendBtn.prop('disabled', false);
                        messageInput.focus();
                    },
                    error: function () {
                        hideTypingIndicator();
                        addMessage('Error: Failed to connect to the server.', false);
                        sendBtn.prop('disabled', false);
                        messageInput.focus();
                    }
                });
            }

            sendBtn.click(sendMessage);

            messageInput.keypress(function (e) {
                if (e.which === 13) {
                    sendMessage();
                }
            });

            messageInput.focus();
        });
    </script>
